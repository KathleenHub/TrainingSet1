SEARCH PROBLEMS

INITIAL STATE
STATE
ACTIONS
TRANSITION MODEL
STATE SPACE
GOAL STATE, GOAL TEST
PATH COST FUNCTION

Optimal solution: find the set of actions that takes the initial state to the goal state while minimizing the path cost

NODE: data structure (state, parent, action, path cost)

Approach: 
1. start with frontier(all things we could explore next) that contains initial state
2. repeat
    - if frontier is empty, then no solution
    - remove a node from frontier
    - if node contains goal state, return the solution
    - expand node(look at the neighbours), add resulting nodes to the frontier
Problems:
- back and forth between 2 states, no memory
=> dont go back to previous state

Revised approach:
1. start with frontier with initial state
2. start with empty explored set
3. repeat:
    - if frontier is empty, then no solution
    - remove a node from frontier
    - if node contains goal state, return the solution
    - add node to explored set
    - expand node(look at the neighbours), add resulting nodes to the frontier if they arent in the explored set

how to chose the next node to remove:
STACK
- last-in first-out data type
=> DEPTH-first search (go deep)
+ can find faster but might not find optimal solution

QUEUE
- first-in first-out data type
=> BREADTH-first search BFS (go wide, shallow)
+ can find optimal solution, but needs to explore more states


Uninformed search
Informed search
- Greedy Best-First Search (GBFS)
    estimated if close to goal: heuristic function h(n)
    eg: manhattan distance (estimate distance ignoring the walls)

A* search
=> lowest value of g(n)+h(n)
- how long it took us to get to this state
- g(n) = cost to reach node (#steps taken to that state)
- h(n) = estimated cost to goal
+ H(n) must be admissible, not overestimate the true cost
+ h(n) must be consistent (for n and n' with step cost c, h(n)<=h(n')+c)

ADVERSARIAL search
eg: game, 3 on a row
MINIMAX 2 player games
- s0: initial state
- players(s): which players turn
- actions: legal moves
- results(s,a)
- terminales
- utilities
RECURSIVE algorithm
0. given state s:
repeat
1. max picks action that produces highest value of minvalue(results(s,a))
2. min picks action that produces lowest values of maxvalue(results(s,a))

function max-value(state):
    if Terminal(state):
        return utility(state)
    v=-inf 
    for action in actions(state):
        v=max(v, min-value(result(state,action)))
    return v

function min-value(state):
    if Terminal(state):
        return utility(state)
    v=+inf 
    for action in actions(state):
        v=min(v, max-value(result(state,action)))
    return v

DEPTH-LIMITED minimax
evaluation function: estimate expected utility
eg: amount of pieces left on the board, type of pieces left on the board



--------